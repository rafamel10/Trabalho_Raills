/* jquery.scrollex v0.2.1 | (c) @ajlkn | github.com/ajlkn/jquery.scrollex | MIT licensed */
var Scrollex = {
  counter: 1,
  registry: {},

  convert_units: function(value, width, height) {
    if (typeof value === 'string') {
      switch (value.slice(-2)) {
        case '%':
          value = parseFloat(value.slice(0, -1)) / 100 * width;
          break;
        case 'vh':
          value = parseFloat(value.slice(0, -2)) / 100 * height;
          break;
        case 'px':
          value = parseFloat(value.slice(0, -2));
          break;
      }
    }
    return value;
  },

  setup: function(window) {
    jQuery(window).on('scroll', function() {
      var scroll_top = jQuery(window).scrollTop();
      for (var id in Scrollex.registry) {
        var entry = Scrollex.registry[id];
        clearTimeout(entry.timeout_id);
        entry.timeout_id = setTimeout(function() {
          entry.handler(scroll_top);
        }, entry.options.delay);
      }
    });
  
    jQuery(window).on('load', function() {
      jQuery(window).trigger('scroll');
    });
  },

  register: function(element, options) {
    if (element.data('_scrollexId')) return element;

    var element_id = Scrollex.counter++;
    var default_options = {
      top: 0,
      bottom: 0,
      delay: 0,
      mode: 'default',
      enter: null,
      leave: null,
      initialize: null,
      terminate: null,
      scroll: null
    };
    options = Object.assign({}, default_options, options);

    var mode_check = function(t, e, n, i, o) {
      switch (options.mode) {
        case 'top':
          return t >= i && o >= t;
        case 'bottom':
          return n >= i && o >= n;
        case 'middle':
          return e >= i && o >= e;
        case 'top-only':
          return i >= t && n >= i;
        case 'bottom-only':
          return n >= o && o >= t;
        default:
          return n >= i && o >= t;
      }
    };

    var handler = function(scroll_top) {
      var entry = Scrollex.registry[element_id];
      var current_state = null;
      var top_test = element.offset().top + Scrollex.convert_units(options.top, window.height(), window.height());
      var bottom_test = element.offset().top + element.outerHeight() - Scrollex.convert_units(options.bottom, window.height(), window.height());
      current_state = mode_check(scroll_top, scroll_top + window.height() / 2, scroll_top + window.height(), top_test, bottom_test);
      if (current_state !== entry.state) {
        entry.state = current_state;
        current_state ? options.enter && options.enter(element) : options.leave && options.leave(element);
      }
      if (options.scroll) {
        options.scroll((scroll_top + window.height() / 2 - top_test) / (bottom_test - top_test));
      }
    };

    var entry = {
      id: element_id,
      options: options,
      test: mode_check,
      handler: handler,
      state: null,
      element: element,
      timeout_id: null
    };

    Scrollex.registry[element_id] = entry;
    element.data('_scrollexId', element_id);
    options.initialize && options.initialize(element);

    return element;
  },

  unregister: function(element) {
    if (!element.data('_scrollexId')) return element;

    var element_id = element.data('_scrollexId');
    var entry = Scrollex.registry[element_id];

    clearTimeout(entry.timeout_id);
    delete Scrollex.registry[element_id];
    element.removeData('_scrollexId');

    entry.options.terminate && entry.options.terminate(element);

    return element;
  }
};

Scrollex.setup(jQuery);
