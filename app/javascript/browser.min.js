// browser.js v1.0.1 | @ajlkn | Licensed under the MIT license
var Browser = {
  can_use: function(feature) {
    if (!this._can_use) {
      this._can_use = document.createElement("div").style;
    }
    var prefix = feature.charAt(0).toUpperCase() + feature.slice(1);
    var feature_in_style = feature in this._can_use;
    var moz_prefix = "Moz" + prefix in this._can_use;
    var webkit_prefix = "Webkit" + prefix in this._can_use;
    var opera_prefix = "O" + prefix in this._can_use;
    var ms_prefix = "ms" + prefix in this._can_use;
    return feature_in_style || moz_prefix || webkit_prefix || opera_prefix || ms_prefix;
  },
  init: function() {
    var user_agent = navigator.userAgent;
    var name = "other";
    var version = 0;

    var user_agent_patterns = [
      ["firefox", /Firefox\/([0-9\.]+)/],
      ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
      ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
      ["opera", /OPR\/([0-9\.]+)/],
      ["opera", /Opera\/([0-9\.]+)/],
      ["edge", /Edge\/([0-9\.]+)/],
      ["safari", /Version\/([0-9\.]+).+Safari/],
      ["chrome", /Chrome\/([0-9\.]+)/],
      ["ie", /MSIE ([0-9]+)/],
      ["ie", /Trident\/.+rv:([0-9]+)/]
    ];

    user_agent_patterns.forEach(function(pattern) {
      var match = user_agent.match(pattern[1]);
      if (match) {
        name = pattern[0];
        version = parseFloat(match[1]);
      }
    });

    this.name = name;
    this.version = version;

    var os = "other";
    var os_version = 0;

    var os_patterns = [
      ["ios", /([0-9_]+) like Mac OS X/, function(match) { return match[1].replace(/_/g, '.'); }],
      ["ios", /CPU like Mac OS X/, function() { return 0; }],
      ["wp", /Windows Phone ([0-9\.]+)/, null],
      ["android", /Android ([0-9\.]+)/, null],
      ["mac", /Macintosh.+Mac OS X ([0-9_]+)/, function(match) { return match[1].replace(/_/g, '.'); }],
      ["windows", /Windows NT ([0-9\.]+)/, null],
      ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
      ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
      ["linux", /Linux/, null],
      ["bsd", /BSD/, null],
      ["unix", /X11/, null]
    ];

    os_patterns.forEach(function(pattern) {
      var match = user_agent.match(pattern[1]);
      if (match) {
        os = pattern[0];
        os_version = pattern[2] ? pattern[2](match) : parseFloat(match[1]);
      }
    });

    if (os === "mac" && ("ontouchstart" in window) && [1024, 1366].includes(screen.width) && [834, 1112].includes(screen.height) || [810, 1080].includes(screen.height) || [768, 1024].includes(screen.height)) {
      os = "ios";
    }

    this.os = os;
    this.os_version = os_version;
    this.touch = (os === "wp") ? 0 : ("ontouchstart" in window);
    this.mobile = ["wp", "android", "ios", "bb"].includes(this.os);
  }
};

Browser.init();
