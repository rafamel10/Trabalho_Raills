// breakpoints.js | @ajlkn | Licensed under the MIT license
var Breakpoints = {
  init: function(list) {
    this.list = list;
    window.addEventListener("resize", this.poll.bind(this));
    window.addEventListener("orientationchange", this.poll.bind(this));
    window.addEventListener("load", this.poll.bind(this));
    window.addEventListener("fullscreenchange", this.poll.bind(this));
  },
  active: function(query) {
    if (this.media.hasOwnProperty(query)) {
      return this.media[query];
    }

    var operator, value, range, min, max, s;
    if (!(query.startsWith(">=") || query.startsWith("<=") || query.startsWith(">") || query.startsWith("<") || query.startsWith("!"))) {
      operator = "eq";
      value = query;
    } else {
      operator = query.slice(0, 2);
      value = query.slice(2);
    }

    if (value && this.list.hasOwnProperty(value)) {
      range = this.list[value];
      min = parseInt(range[0]);
      max = parseInt(range[1]);

      switch (operator) {
        case "gte":
          s = "screen and (min-width: " + min + "px)";
          break;
        case "lte":
          s = "screen and (max-width: " + max + "px)";
          break;
        case "gt":
          s = "screen and (min-width: " + (max + 1) + "px)";
          break;
        case "lt":
          s = "screen and (max-width: " + (min - 1) + "px)";
          break;
        case "not":
          s = "screen and (max-width: " + (min - 1) + "px), screen and (min-width: " + (max + 1) + "px)";
          break;
        default:
          s = "screen and (min-width: " + min + "px) and (max-width: " + max + "px)";
      }
    } else {
      s = (value[0] === "(") ? "screen and " + value : value;
    }

    this.media[query] = !!s && s;
    return this.media[query];
  },
  on: function(query, handler) {
    this.events.push({ query: query, handler: handler, state: false });
    if (this.active(query)) {
      handler();
    }
  },
  poll: function() {
    this.events.forEach(function(event) {
      if (this.active(event.query)) {
        if (!event.state) {
          event.state = true;
          event.handler();
        }
      } else {
        event.state = false;
      }
    }, this);
  },
  list: null,
  media: {},
  events: []
};

// Exemplo de uso:
Breakpoints.init({
  xlarge: ['1281px', '1680px'],
  large: ['981px', '1280px'],
  medium: ['737px', '980px'],
  small: ['481px', '736px'],
  xsmall: [null, '480px']
});

Breakpoints.on('>medium', function() {
  // Lógica a ser executada quando a largura da tela for maior do que medium
});

Breakpoints.on('<=medium', function() {
  // Lógica a ser executada quando a largura da tela for menor ou igual a medium
});
